// Code generated by MockGen. DO NOT EDIT.
// Source: bugreport.go

package bugreport

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockExample is a mock of Example interface
type MockExample struct {
	ctrl     *gomock.Controller
	recorder *MockExampleMockRecorder
}

// MockExampleMockRecorder is the mock recorder for MockExample
type MockExampleMockRecorder struct {
	mock *MockExample
}

// NewMockExample creates a new mock instance
func NewMockExample(ctrl *gomock.Controller) *MockExample {
	mock := &MockExample{ctrl: ctrl}
	mock.recorder = &MockExampleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockExample) EXPECT() *MockExampleMockRecorder {
	return _m.recorder
}

// Method mocks base method
func (_m *MockExample) Method(_m int, _mr int, m int, mr int) {
	_m.ctrl.Call(_m, "Method", _m, _mr, m, mr)
}

// Method indicates an expected call of Method
func (_mr *MockExampleMockRecorder) Method(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Method", reflect.TypeOf((*MockExample)(nil).Method), arg0, arg1, arg2, arg3)
}

// VarargMethod mocks base method
func (_m *MockExample) VarargMethod(_s int, _x int, a int, ret int, varargs ...int) {
	_s := []interface{}{_s, _x, a, ret}
	for _, _x := range varargs {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "VarargMethod", _s...)
}

// VarargMethod indicates an expected call of VarargMethod
func (_mr *MockExampleMockRecorder) VarargMethod(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "VarargMethod", reflect.TypeOf((*MockExample)(nil).VarargMethod), _s...)
}
